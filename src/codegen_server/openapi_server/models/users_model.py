from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UsersModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, email=None, name=None, role=None, question=None, answer=None, percentage=None, result=None, recordingpath=None, _date=None):  # noqa: E501
        """UsersModel - a model defined in OpenAPI

        :param id: The id of this UsersModel.  # noqa: E501
        :type id: int
        :param email: The email of this UsersModel.  # noqa: E501
        :type email: str
        :param name: The name of this UsersModel.  # noqa: E501
        :type name: str
        :param role: The role of this UsersModel.  # noqa: E501
        :type role: str
        :param question: The question of this UsersModel.  # noqa: E501
        :type question: str
        :param answer: The answer of this UsersModel.  # noqa: E501
        :type answer: str
        :param percentage: The percentage of this UsersModel.  # noqa: E501
        :type percentage: int
        :param result: The result of this UsersModel.  # noqa: E501
        :type result: str
        :param recordingpath: The recordingpath of this UsersModel.  # noqa: E501
        :type recordingpath: str
        :param _date: The _date of this UsersModel.  # noqa: E501
        :type _date: datetime
        """
        self.openapi_types = {
            'id': int,
            'email': str,
            'name': str,
            'role': str,
            'question': str,
            'answer': str,
            'percentage': int,
            'result': str,
            'recordingpath': str,
            '_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'name': 'name',
            'role': 'role',
            'question': 'question',
            'answer': 'answer',
            'percentage': 'percentage',
            'result': 'result',
            'recordingpath': 'recordingpath',
            '_date': 'date'
        }

        self._id = id
        self._email = email
        self._name = name
        self._role = role
        self._question = question
        self._answer = answer
        self._percentage = percentage
        self._result = result
        self._recordingpath = recordingpath
        self.__date = _date

    @classmethod
    def from_dict(cls, dikt) -> 'UsersModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The users_model of this UsersModel.  # noqa: E501
        :rtype: UsersModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UsersModel.


        :return: The id of this UsersModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UsersModel.


        :param id: The id of this UsersModel.
        :type id: int
        """

        self._id = id

    @property
    def email(self) -> str:
        """Gets the email of this UsersModel.


        :return: The email of this UsersModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UsersModel.


        :param email: The email of this UsersModel.
        :type email: str
        """

        self._email = email

    @property
    def name(self) -> str:
        """Gets the name of this UsersModel.


        :return: The name of this UsersModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UsersModel.


        :param name: The name of this UsersModel.
        :type name: str
        """

        self._name = name

    @property
    def role(self) -> str:
        """Gets the role of this UsersModel.


        :return: The role of this UsersModel.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this UsersModel.


        :param role: The role of this UsersModel.
        :type role: str
        """

        self._role = role

    @property
    def question(self) -> str:
        """Gets the question of this UsersModel.


        :return: The question of this UsersModel.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this UsersModel.


        :param question: The question of this UsersModel.
        :type question: str
        """

        self._question = question

    @property
    def answer(self) -> str:
        """Gets the answer of this UsersModel.


        :return: The answer of this UsersModel.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer: str):
        """Sets the answer of this UsersModel.


        :param answer: The answer of this UsersModel.
        :type answer: str
        """

        self._answer = answer

    @property
    def percentage(self) -> int:
        """Gets the percentage of this UsersModel.


        :return: The percentage of this UsersModel.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage: int):
        """Sets the percentage of this UsersModel.


        :param percentage: The percentage of this UsersModel.
        :type percentage: int
        """

        self._percentage = percentage

    @property
    def result(self) -> str:
        """Gets the result of this UsersModel.


        :return: The result of this UsersModel.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this UsersModel.


        :param result: The result of this UsersModel.
        :type result: str
        """

        self._result = result

    @property
    def recordingpath(self) -> str:
        """Gets the recordingpath of this UsersModel.


        :return: The recordingpath of this UsersModel.
        :rtype: str
        """
        return self._recordingpath

    @recordingpath.setter
    def recordingpath(self, recordingpath: str):
        """Sets the recordingpath of this UsersModel.


        :param recordingpath: The recordingpath of this UsersModel.
        :type recordingpath: str
        """

        self._recordingpath = recordingpath

    @property
    def _date(self) -> datetime:
        """Gets the _date of this UsersModel.


        :return: The _date of this UsersModel.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this UsersModel.


        :param _date: The _date of this UsersModel.
        :type _date: datetime
        """

        self.__date = _date
