openapi: 3.0.0
info:
  description: speechtotext
  title: speechtotext
  version: 1.0.0
servers:
- description: Local dev
  url: https://localhost:8991/api
- description: Future dev url
  url: https://speechtotext.globalpay.com/
tags:
- description: api(s) for returning status
  name: status
paths:
  /audio:
    post:
      description: This API is used to capture audio and convert it to text and then
        store the result
      operationId: get_audio
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioObject'
          description: Audio captured and converted and stored successfully
      summary: To capture the audio and convert it to text and store the result
      tags:
      - audio
      x-openapi-router-controller: openapi_server.controllers.audio_controller
  /audio/upload:
    post:
      description: This API is used to get audio blob and save it and then convert
        it to text
      operationId: get_audio_blob
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AudioBlobRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioObject'
          description: Audio captured and converted and stored successfully
      summary: To capture the audio and convert it to text and store the result
      tags:
      - audio
      x-openapi-router-controller: openapi_server.controllers.audio_controller
  /docs/swagger_ui:
    get:
      description: ""
      operationId: load_swagger_ui
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
          description: successful operation
      security:
      - basicAuth: []
      summary: load swagger ui
      tags:
      - swagger_ui
      x-openapi-router-controller: openapi_server.controllers.swagger_ui_controller
  /jobs:
    get:
      description: This API is used to get all job details
      operationId: get_jobs
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobObject'
          description: Job details retrieved successfully
      summary: To get the job details
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
    post:
      description: This API is used to store job data for given role
      operationId: save_job
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveJobObject'
          description: Job data saved successfully
      summary: To store job data for given role
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
  /jobs/{job_id}:
    get:
      description: This API is used to get the question details of provided job id
      operationId: get_jobid_questions
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      - explode: false
        in: path
        name: job_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionObject'
          description: Question details retrieved successfully
      summary: To get the question details
      tags:
      - job
      x-openapi-router-controller: openapi_server.controllers.job_controller
  /question:
    get:
      description: This API is used to get all question details
      operationId: get_all_questions
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionObject'
          description: Question details retrieved successfully
      summary: To get the question details
      tags:
      - question
      x-openapi-router-controller: openapi_server.controllers.question_controller
    post:
      description: This API is used to store questions data for given role
      operationId: save_questions
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveQuestionObject'
          description: Question data saved successfully
      summary: To store question data for given role
      tags:
      - question
      x-openapi-router-controller: openapi_server.controllers.question_controller
    put:
      description: This API is used to update question and expected_answer
      operationId: update_question
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveQuestionObject'
          description: Question data updated successfully
      summary: To update question data for given role
      tags:
      - question
      x-openapi-router-controller: openapi_server.controllers.question_controller
  /user:
    post:
      description: This API is used to store user response in database
      operationId: save_user_response
      parameters:
      - explode: false
        in: header
        name: accept_version
        required: false
        schema:
          default: v1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: User data stored successfully
      summary: To store user data for given question
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
components:
  schemas:
    attribute:
      description: An Attribute
      example:
        datatype: datatype
        name: name
        value: value
      properties:
        name:
          title: name
          type: string
        value:
          title: value
          type: string
        datatype:
          title: datatype
          type: string
      title: Attribute
      type: object
    status:
      example:
        attributes:
        - datatype: datatype
          name: name
          value: value
        - datatype: datatype
          name: name
          value: value
        message: message
        version: version
      properties:
        message:
          title: message
          type: string
        version:
          title: version
          type: string
        attributes:
          items:
            $ref: '#/components/schemas/attribute'
          title: attributes
          type: array
      title: A standard object for Status of API
      type: object
    Error:
      properties:
        code:
          format: int64
          title: code
          type: integer
        message:
          format: string
          title: message
          type: string
      title: Error Message
      type: object
    AudioRequest:
      example:
        question: question
        start_recording: start_recording
      properties:
        question:
          type: string
        start_recording:
          type: boolean
      required:
      - question
      - start_recording
      title: AudioRequest
      type: object
    AudioBlobRequest:
      example:
        file: file
      properties:
        file:
          format: binary
          type: string
      title: AudioBlobRequest
      type: object
    UserRequest:
      example:
        email: email
        name: name
        role: role
        question: question
      properties:
        email:
          format: email
          type: string
        name:
          type: string
        role:
          type: string
        question:
          type: string
      title: UserRequest
      type: object
    QuestionRequest:
      example:
        id: id
        role: role
        hr_email: hr_email
        question: question
        expected_answer: expected_answer
      properties:
        id:
          type: integer
        role:
          type: string
        hr_email:
          format: email
          type: string
        question:
          type: string
        expected_answer:
          type: string
      title: QuestionRequest
    JobRequest:
      example:
        role: role
        hr_email: hr_email
      properties:
        role:
          type: string
        hr_email:
          format: email
          type: string
      title: JobRequest
    AudioObject:
      example:
        message: message
      properties:
        message:
          type: string
      title: AudioObject
      type: object
    QuestionObject:
      example:
        questions: question
        role: role
      properties:
        questions:
          items:
            type: string
          type: array
        role:
          type: string
      title: QuestionObject
      type: object
    UserObject:
      example:
        id: id
      properties:
        id:
          type: string
      title: UserObject
      type: object
    SaveQuestionObject:
      example:
        message: message
      properties:
        message:
          type: string
      title: SaveQuestionObject
      type: object
    SaveJobObject:
      example:
        message: message
      properties:
        message:
          type: string
      title: SaveJobObject
      type: object
    GetJobObject:
      example:
        job_id: job_id
        role: role
        hr_email: hr_email
      properties:
        job_id:
          type: integer
        role:
          type: string
        hr_email:
          format: email
          type: string
      title: GetTypeObject
      type: object
    users_model:
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
        question:
          type: string
        answer:
          type: string
        percentage:
          type: integer
        result:
          type: string
        recordingpath:
          type: string
        date:
          format: date-time
          type: string
  securitySchemes:
    basicAuth:
      description: Requests should pass credentials in header
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.server_impl.security_controller_impl.parse_info_from_basic
